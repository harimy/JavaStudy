/*=====================================
	■■■ 연산자(Operator) ■■■
	- 비트 단위 연산자
=====================================*/

// 비트 shift 연산자

public class Test026
{
	public static void main(String[] args)
	{
		int x=128;
		// 128		→ 00000000 00000000 00000000 10000000
		// 128<<3	→ 00000000 00000000 00000100 00000000

		// 128		→ 00000000 00000000 00000000 10000000
		// 128>>3	→ 00000000 00000000 00000000 00010000
		
		System.out.printf("x << 3 = %d\n", (x<<3));
		System.out.printf("x * 8 = %d\n", (x*8));

		System.out.printf("x >> 3 = %d\n", (x>>3));
		System.out.printf("x / 8 = %d\n", (x/8));

		System.out.println();

		System.out.printf("x << 24 = %d\n", (x<<24));
		// 10000000 00000000 00000000 00000000
		//--==>> x << 24 = -2147483648
		
		System.out.printf("x << 25 = %d\n", (x<<25));
		// 1   00000000 00000000 00000000 00000000
		//--==>> x << 25 = 0

		System.out.printf("x << 26 = %d\n", (x<<26)); //-- 0
		//		      :                :
		System.out.printf("x << 31 = %d\n", (x<<31)); //-- 0

		System.out.printf("x << 32 = %d\n", (x<<32)); //-- 128
		System.out.printf("x << 33 = %d\n", (x<<33)); //-- 256
		System.out.printf("x << 34 = %d\n", (x<<34)); //    :		
		System.out.printf("x << 35 = %d\n", (x<<35));
		System.out.printf("x << 36 = %d\n", (x<<36));

		// 128		→     00000000 00000000 00000000 10000000
		// 128<<25	→ (1) 00000000 00000000 00000000 00000000
		// 떨어져 나간 1은 사라지는게 아니라 다시 뒤로 돌아서 들어오게 된다
		// 128<<25	→     00000000 00000000 00000000 00000001
		// 원래 자리로 돌아올 때 까지는 0으로 표기되며,
		// 128<<32	→     00000000 00000000 00000000 10000000 → 128
		// 원래 자리에 돌아오면 128의 값을 되찾고 그 이후로는 다시 값이 증가
		// 128<<33	→     00000000 00000000 00000001 00000000 → 256

	}
}

/* [실행 결과]
x << 3 = 1024
x * 8 = 1024
x >> 3 = 16
x / 8 = 16
*/
