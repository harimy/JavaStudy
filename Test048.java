/*=====================================
	■■■ 실행 흐름의 컨트롤(제어문) ■■■
	- 반복문 (while문) 실습
=====================================*/

// 1/2 + 2/3 + 3/4 + ... + 9/10 
// 1.0/2 + 2.0/3 + 3.0/4 + ... 9.0/10

// 1.0/2.0 + 2.0/3.0 + ... + 9.0/10.0

// 변수를 정수로 잡아서 형변환 후 연산하는 것과
// 처음부터 실수로 잡아서 연산하는 것은
// 연산중에 메모리 차이가 생겨서 결과도 조금씩 달라질 수 있다.
// 특히 실수는 반복하다보면 오차가 점점 커지기 때문에
// 참조) https://blog.naver.com/PostView.nhn?blogId=tipsware&logNo=221960671954

// 실행 예)
// 연산 결과 : xxxx ← 데이터 형태? ← 실수
// 계속하려면 아무 키나...

public class Test048
{
	public static void main(String[] args)
	{
		// 내가 풀이한 내용
		/*
		double n=1.0, sum=0.0; // 웬만하면 정수 단위로 증가하는 변수는 정수로 잡자

		while(n<=9)
		{
			sum += n/(n+1);					
			n++;
		}
		System.out.printf("연산 결과 : %.2f\n", sum);
		*/

		// 함께 풀이한 내용
		
		// ○ 주요 변수 선언 및 초기화
		int n=0;		//-- 1부터 1씩 증가하게 될 변수(0으로 초기화)
		double sum=0;		//-- 누적합을 담을 변수(데이터타입 : 실수 형태)

		// ○ 연산 및 처리(반복문 구성)
		while(n<=8)	// while(n<9)
		{
			// 증감식 구성 → 최종적으로 반복문의 조건을 무너뜨리게 되는 열쇠
			n++;

			// 연산 수행
			sum += (double)n/(n+1);
			//-- 정수 기반의 나눗셈 연산은 몫을 반환하기 때문에
			//   실수 기반의 연산을 수행할 수 있도록 만들기 위해
			//   나눗셈 연산자를 중심으로 피연산자 중 하나를
			//   실수 형태로 만들어 주는 것이 중요하다.
		}

		// ○ 결과 출력 
		System.out.printf("연산 결과 : %.2f\n", sum);

	}
}

/* [실행 결과]
연산 결과 : 7.07
*/